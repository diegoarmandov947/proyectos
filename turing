#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <stdbool.h>

#define MAX_LONG 256
char *estadoActual;
char *funcion = "0^{n}1^{n} | n >= 0";
int i, longitudW;
void estado_q0(char*, int);
void estado_q1(char*, int);
void estado_q2(char*, int);
void estado_q3(char*, int);
void stop(bool);
void addBlankL(char *w);
void addBlankR(char *w);
void salidaTrue();
void salidaFalse();
void printLog(char *w, char *ea, int i, char x, char m, char *e);
void stop(bool resultado);
int linea(int s);
void printTablaMT();
int main(int argc, char *argv[]) {
  
  char *w = malloc(MAX_LONG);
  printf("Introduce una cadena: ");
 
  fgets(w, MAX_LONG, stdin);
  
  longitudW = strlen(w) - 1;
  
  if ((longitudW + 1 > 0) && (w[longitudW] == '\n')) {
    w[longitudW] = '\0';
  }
  
  if (strlen(w) % 2 != 0) {
    salidaFalse();
  } else if(strlen(w) == 0){
    
    salidaTrue();
  } else {
    printTablaMT();
    
    addBlankL(w);
    addBlankR(w);
    
    estado_q0(w, 1);
  }
  
  free(w);
  return 0;
}
void addBlankL(char *w) {
  
  for (i = strlen(w); i > 0; i--) {
    w[i] = w[i - 1];
  }
  
  w[i] = '_';
}
void addBlankR(char *w) {
  
  strcat(w, "_");
}
void salidaTrue() {
  printf("\n\nEnhorabuena! se cumple que %s\n\n", funcion);
}
void salidaFalse() {
  printf("\n\nNo se cumple que %s\n\n", funcion);
}
void printLog(char *w, char *ea, int i, char x, char m, char *e) {
  printf(
      "\nw es: \"%s\". Estoy en %s, leo \"%c\", lo cambio por \"%c\", me muevo a la %c y me voy al estado %s.",
      w, ea, w[i], x, m, e);
}
void estado_q0(char *w, int i) {
  estadoActual = "q0";
  
  if (w[i] == '0') {
    printLog(w, estadoActual, i, 'X', 'R', "q1");
    
    w[i] = 'X';
    
    estado_q1(w, i += 1);
    
  } else if (w[i] == '1' || w[i] == 'X' || w[i] == '_') {
    
    stop(false);
    
  } else if (w[i] == 'Y') {
    printLog(w, estadoActual, i, 'Y', 'R', "q3");
    
    estado_q3(w, i += 1);
  }
}
void estado_q1(char *w, int i) {
  estadoActual = "q1";
  
  if (w[i] == '0') {
    printLog(w, estadoActual, i, '0', 'R', "q1");
    
    estado_q1(w, i += 1);
   
  } else if (w[i] == '1') {
    printLog(w, estadoActual, i, 'Y', 'L', "q2");
    
    w[i] = 'Y';
    
    estado_q2(w, i -= 1);
    
  } else if (w[i] == 'X' || w[i] == '_') {
   
    stop(false);
    
  } else if (w[i] == 'Y') {
    printLog(w, estadoActual, i, 'Y', 'R', "q1");
    
    estado_q1(w, i += 1);
  }
}
void estado_q2(char *w, int i) {
  estadoActual = "q2";
  
  if (w[i] == '0') {
    printLog(w, estadoActual, i, '0', 'L', "q2");
    
    estado_q2(w, i -= 1);
    
  } else if (w[i] == '1' || w[i] == '_') {
    
    stop(false);
   
  } else if (w[i] == 'X') {
    printLog(w, estadoActual, i, 'X', 'R', "q0");
    
    estado_q0(w, i += 1);
    
  } else if (w[i] == 'Y') {
    printLog(w, estadoActual, i, 'Y', 'L', "q2");
    
    estado_q2(w, i -= 1);
  }
}
void estado_q3(char *w, int i) {
  estadoActual = "q3";
  
  if (w[i] == '0' || w[i] == '1' || w[i] == 'X') {
    
    stop(false);
    
  } else if (w[i] == 'Y') {
    printLog(w, estadoActual, i, 'Y', 'R', "q3");
    
    estado_q3(w, i += 1);
    
  } else if (w[i] == '_') {
    printLog(w, estadoActual, i, '_', 'R', "STOP");
    
    stop(true);
  }
}
void stop(bool resultado) {
  if (resultado) {
    salidaTrue();
  } else {
    salidaFalse();
  }
}
int linea(int s) {
  int i;
  fprintf(stdout,"+");
  for (i = 0; i <= s; i++) {
    fprintf(stdout,"-");
  }
  fprintf(stdout,"+\n");
  return 0;
}
void printTablaMT(){
  printf("\nMaquina de Turing para %s\n\n", funcion);
  linea(62);
  printf("|%-5.5s      %-5.5s      %-5.5s      %-5.5s      %-5.5s   %-10.10s |\n", " ", "0", "1", "X", "Y", "    _");
  linea(62);
  printf("|%-5.5s   %-8.8s   %-8.8s   %-8.8s   %-8.8s   %-10.10s |\n", " q0", "(X,R,q1)", "   -", "   -", "(Y,R,q3)", "    _");
  printf("|%-5.5s   %-8.8s   %-8.8s   %-8.8s   %-8.8s   %-10.10s |\n", " q1", "(0,R,q1)", "(Y,L,q2)", "   -", "(Y,R,q1)", "    _");
  printf("|%-5.5s   %-8.8s   %-8.8s   %-8.8s   %-8.8s   %-10.10s |\n", " q2", "(0,L,q2)", "   -", "(X,R,q0)", "(Y,L,q2)", "    _");
  printf("|%-5.5s   %-8.8s   %-8.8s   %-8.8s   %-8.8s   %-10.10s |\n", " q3", "   -", "   -", "   -", "(Y,R,q3)", "(#,R,STOP)");
  linea(62);
}
